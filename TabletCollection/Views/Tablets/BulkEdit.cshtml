@model IList<TabletCollection.ViewModels.TabletViewModel>
@{
    ViewBag.Title = "Bulk Edit";
}

<div class="row well">
    <div class="offset-1 col-1">
        <h2 class="text-primary">
            <span class="glyphicon glyphicon-edit">&nbsp;</span> - Purchase Bulk Edit
        </h2>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "batchUpdate" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <table id="indexTable" class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().TabletName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().SerialNo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().AssetTag)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().IsPurchased)
                    </th>
                    @*<th>
                        @Html.DisplayNameFor(model => model.FirstOrDefault().IsPickedUp)
                    </th>*@
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.Count(); i++)
                {
                    <tr>
                        <td>
                            @Html.HiddenFor(m => m[i].ID)
                            @Html.HiddenFor(m => m[i].RowVersion)
                            @Html.HiddenFor(m => m[i].CreatedBy)
                            @Html.HiddenFor(m => m[i].CreatedOn)
                            @Html.HiddenFor(m => m[i].UpdatedBy)
                            @Html.HiddenFor(m => m[i].UpdatedOn)
                            @Html.HiddenFor(m => m[i].TabletName)
                            @Html.HiddenFor(m => m[i].SerialNo)
                            @Html.HiddenFor(m => m[i].AssetTag)
                            @Html.HiddenFor(m => m[i].IsPickedUp)
                            @Html.HiddenFor(m => m[i].IsExtraPurchase)
                            @Html.HiddenFor(m => m[i].IsVendorBuyout)
                            @Html.HiddenFor(m => m[i].Notes)
                        </td>
                        <td>
                            @Html.DisplayFor(model => model[i].TabletName)
                        </td>
                        <td>
                            @Html.DisplayFor(model => model[i].SerialNo)
                        </td>
                        <td>
                            @Html.DisplayFor(model => model[i].AssetTag)
                        </td>
                        <td>
                            <label class="cellCheckBox">
                                @Html.CheckBoxFor(model => model[i].IsPurchased, new { @class = "scaledCheckBox" })
                            </label>
                        </td>
                        @*<td>
                            <label class="cellCheckBox">

                                @Html.CheckBoxFor(model => model[i].IsPickedUp, new { @class = "scaledCheckBox" })
                            </label>
                        </td>*@
                    </tr>
                }

            </tbody>
        </table>
        <div class="well well-sm form-group">
            <div class="col-md-10">
                <span class="icon-input-btn">
                    <span class="glyphicon glyphicon-floppy-save"></span>
                    <input type="submit" value="Update" class="btn btn-primary" />
                </span>
                <span class="icon-input-btn">
                    <span class="glyphicon glyphicon-step-backward"></span>
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
                </span>
            </div>
        </div>
    </div>
}
@section scripts
{
    <script>
        $(document).ready(function () {
            var table = $("#indexTable").DataTable(
                {
                    // "dom": 'lfBpt<pi>',
                    "pagingType": "first_last_numbers",
                    //"columnDefs": [
                    //    { "orderable": false, "targets": [3,4] },

                    //],


                }
            );
            // Handle form submission event
            $('#batchUpdate').on('submit', function (e) {
                var form = this;
                $(document.body).css({ 'cursor': 'cursor-wait' });
                // Encode a set of form elements from all pages as an array of names and values
                var params = table.$('input').serializeArray();
                $('body').addClass('cursor-wait');
                // Iterate over all form elements
                $.each(params, function () {
                    // If element doesn't exist in DOM
                    if (!$.contains(document, form[this.name])) {
                        // Create a hidden element
                        $(form).append(
                            $('<input>')
                                .attr('type', 'hidden')
                                .attr('name', this.name)
                                .val(this.value)
                        );
                    }
                });
                $('body').removeClass('cursor-wait');
            });
        });

    </script>

}